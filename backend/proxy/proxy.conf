events { }

http {
  

  map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

  server {
    listen 80;
    server_name api.shhootout.tk;
    return 301 https://api.shhootout.tk$request_uri;
    }

    server {
        listen 80;
        server_name shhootout.tk web.shhootout.tk;
        return 301 https://web.shootout.tk$request_uri;
    }

   server {
    listen 443 ssl;
    server_name api.shhootout.tk;
    
    # to use locally use the self signed certificates in the ssl directory
    # for production use the appropiate keys
    ssl_certificate /ssl/server.crt;
    ssl_certificate_key /ssl/server.key;
    # ssl_password_file /ssl/shhootout.pass;
    
    access_log /var/log/nginx/data-access.log combined;

    location / {
       proxy_pass http://api:8000/;
       proxy_set_header X-Real-IP  $remote_addr;
       proxy_set_header X-Forwarded-For $remote_addr;
       proxy_set_header Host $host;
       proxy_set_header X-Forwarded-Proto $scheme;
       proxy_redirect http://api:8000/ $scheme://$http_host/;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection $connection_upgrade;
       proxy_read_timeout 20d;
       proxy_buffering off;
       }

   }

 server {
    listen 443 ssl;
    server_name web.shhootout.tk www.shhootout.tk shhootout.tk;
    
    # to use locally use the self signed certificates in the ssl directory
    # for production use the appropiate keys
    ssl_certificate /ssl/server.crt;
    ssl_certificate_key /ssl/server.key;
    # ssl_password_file /ssl/shhootout.pass;
    
    access_log /var/log/nginx/data-access.log combined;


    location / {
       proxy_pass http://frontend:5000/;
       proxy_set_header X-Real-IP  $remote_addr;
       proxy_set_header X-Forwarded-For $remote_addr;
       proxy_set_header Host $host;
       proxy_set_header X-Forwarded-Proto $scheme;
       proxy_redirect http://frontend:5000/ $scheme://$http_host/;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection $connection_upgrade;
       proxy_read_timeout 20d;
       proxy_buffering off;
       }

          # On-disk Brotli-precompressed data files should be served with compression enabled:
      location ~ .+\.(data|symbols\.json)\.br$ {
         proxy_pass http://frontend:5000;
       proxy_redirect http://frontend:5000 $scheme://$http_host;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection $connection_upgrade;
          # Because this file is already pre-compressed on disk, disable the on-demand compression on it.
          # Otherwise nginx would attempt double compression.
          gzip off;
          add_header Content-Encoding br;
          default_type application/octet-stream;
      }

    location ~ .+\.unityweb$ {
       proxy_pass http://frontend:5000;
       proxy_redirect http://frontend:5000 $scheme://$http_host;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection $connection_upgrade;

       expires 2d;
       add_header Content-Encoding br;
    }

      # On-disk Brotli-precompressed WebAssembly files:
      location ~ .+\.wasm\.br$ {
         proxy_pass http://frontend:5000;
       proxy_redirect http://frontend:5000 $scheme://$http_host;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection $connection_upgrade;

          gzip off; # Do not attempt dynamic gzip compression on an already compressed file
          add_header Content-Encoding br;
          # Enable streaming WebAssembly compilation by specifying the correct MIME type for
          # Wasm files.
          default_type application/wasm;
      }
   }

}
